# This is a basic workflow to help you get started with Actions

name: Regression

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - 'UAT'
  pull_request:
    branches:
      - main
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
    provar_regression:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      environment: UAT
      env:
        provar_major_version: latest
        provar_build_version: latest
        dev_hub_alias: SFDX-ENV
        provar_home: ${{ github.workspace }}/ProvarHome
        test_environment: UAT
      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2.4.2
        - uses: actions/setup-java@v3.4.1
          with:
            java-version: '8'
            distribution: 'temurin'
        - uses: actions/setup-node@v3
          with:
            node-version: '14'
        - name: Setup NPM
          run: npm install
        - uses: sfdx-actions/setup-sfdx@v1
          with:
            sfdx-auth-url: ${{ secrets.SFDX_AUTH_URL }}

        - name: Install ProvarDX SFDX Plugin
          run: |
            echo y | sfdx plugins:install @provartesting/provardx
            sfdx plugins:update

        - name: Download Provar CLI
          uses: wei/wget@v1.1.1
          with:
            args: -nv https://download.provartesting.com/${{ env.provar_major_version }}/Provar_ANT_${{ env.provar_build_version }}.zip

        - name: Setup Provar CLI
          run: |
            echo "Unzip Provar ANT Files"
            unzip -q Provar_ANT_${{ env.provar_build_version }}.zip -d $GITHUB_WORKSPACE/ProvarHome
            ls -la ${{ env.provar_home }}
            ls -la ${{ env.provar_home }}/provardx
            
        - name: List Authenticated Orgs and Set Default Username
          run: |
            sfdx force:org:list --clean
            sfdx force:config:set defaultdevhubusername=${{ env.dev_hub_alias }} defaultusername=${{ env.dev_hub_alias }} --global
              
        - name: Insert Secrets Password
          run: sed -i "s|ProvarSecretsPassword|${{ secrets.PROVAR_SECRETS_PASSWORD }}|" $GITHUB_WORKSPACE/ProvarProject/provardx/provardx-properties.json

        - name: Replace Workspace Path
          run: sed -i "s|GITHUBWORKSPACE|$GITHUB_WORKSPACE|" $GITHUB_WORKSPACE/ProvarProject/provardx/provardx-properties.json

        - name: Insert Test Environment
          run: sed -i "s|TEST_ENVIRONMENT|${{ env.test_environment }}|" $GITHUB_WORKSPACE/ProvarProject/provardx/provardx-properties.json

        ## DevOps Center takes care of the pushing of source to an org
        # - name: Push Branch to ${{ env.test_environment}} Org
        #   run: |
        #     sfdx force:source:push -u ${{ env.dev_hub_alias }} -f --json --loglevel fatal

        - name: Validate ProvarDX property file
          run: sfdx provar:validate -p ProvarProject/provardx/provardx-properties.json

        - name: Compile Provar Project
          run: sfdx provar:compile -p ProvarProject/provardx/provardx-properties.json

        - name: Run Provar Tests
          run: echo y | xvfb-run sfdx provar:runtests -p ProvarProject/provardx/provardx-properties.json 

        - name: Upload Test Results Folder
          uses: actions/upload-artifact@v3.1.0
          with:
            # Artifact name
            name: TestResults # optional, default is artifact
            # A file, directory or wildcard pattern that describes what to upload
            path: '**/ANT/Results'
            # The desired behavior if no files are found using the provided path.
            if-no-files-found: error
            retention-days: 14 # optional
    test_results:
      name: "Publish Test Results"
      needs: provar_regression
      runs-on: ubuntu-latest
      # the linux_regression job might be skipped, we don't need to run this job then
      if: success() || failure()
      steps:
        - name: Download Artifacts
          uses: actions/download-artifact@v3.0.0
          with:
            path: artifacts

     #   - name: Publish JUnit Test Results
     #     uses: EnricoMi/publish-unit-test-result-action@v2.0.0
     #     with:
     #       github_token: ${{ secrets.GITHUB_TOKEN }}
     #       check_name: "Provar Regression Test Report"
     #       # File pattern of test result files
     #       junit_files: '**/Results/*.xml'
     #       # Individual runs of the same test may see different failures. Reports all individual failures when set "true" or the first only otherwise
     #       report_individual_runs: true
     #      # De-duplicates classes with same name by their file name when set "true", combines test results for those classes otherwise
     #       deduplicate_classes_by_file_name: false
        - name: Publish JUnit Test Results
          uses: mikepenz/action-junit-report@v3.3.3
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            report_paths: "**/Results/*.xml"
            check_name: "Provar Regression Test Report"
            fail_on_failure: true
            include_passed: true
            detailed_summary: true
